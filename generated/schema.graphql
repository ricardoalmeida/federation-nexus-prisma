### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input IntFieldUpdateOperationsInput {
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createOnePlaylist(data: PlaylistCreateInput!): Playlist!
  createOneTrack(data: TrackCreateInput!): Track!
  deleteOnePlaylist(where: PlaylistWhereUniqueInput!): Playlist
  deleteOneTrack(where: TrackWhereUniqueInput!): Track
  updateOnePlaylist(data: PlaylistUpdateInput!, where: PlaylistWhereUniqueInput!): Playlist
  updateOneTrack(data: TrackUpdateInput!, where: TrackWhereUniqueInput!): Track
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Playlist {
  description: String!
  id: Int!
  tracks(after: PlaylistTrackWhereUniqueInput, before: PlaylistTrackWhereUniqueInput, first: Int, last: Int): [Track!]!
}

input PlaylistCreateInput {
  description: String!
  tracks: PlaylistTrackCreateManyWithoutPlaylistInput
}

input PlaylistTrackCreateManyWithoutPlaylistInput {
  connect: [PlaylistTrackWhereUniqueInput!]
  create: [PlaylistTrackCreateWithoutPlaylistInput!]
}

input PlaylistTrackCreateWithoutPlaylistInput {
  addedAt: DateTime!
  trackId: Int!
}

input PlaylistTrackListRelationFilter {
  every: PlaylistTrackWhereInput
  none: PlaylistTrackWhereInput
  some: PlaylistTrackWhereInput
}

input PlaylistTrackScalarWhereInput {
  addedAt: DateTimeFilter
  AND: [PlaylistTrackScalarWhereInput!]
  id: IntFilter
  NOT: [PlaylistTrackScalarWhereInput!]
  OR: [PlaylistTrackScalarWhereInput!]
  playlistId: IntFilter
  trackId: IntFilter
}

input PlaylistTrackUpdateManyDataInput {
  addedAt: DateTimeFieldUpdateOperationsInput
  trackId: IntFieldUpdateOperationsInput
}

input PlaylistTrackUpdateManyWithoutPlaylistInput {
  connect: [PlaylistTrackWhereUniqueInput!]
  create: [PlaylistTrackCreateWithoutPlaylistInput!]
  delete: [PlaylistTrackWhereUniqueInput!]
  deleteMany: [PlaylistTrackScalarWhereInput!]
  disconnect: [PlaylistTrackWhereUniqueInput!]
  set: [PlaylistTrackWhereUniqueInput!]
  update: [PlaylistTrackUpdateWithWhereUniqueWithoutPlaylistInput!]
  updateMany: [PlaylistTrackUpdateManyWithWhereNestedInput!]
  upsert: [PlaylistTrackUpsertWithWhereUniqueWithoutPlaylistInput!]
}

input PlaylistTrackUpdateManyWithWhereNestedInput {
  data: PlaylistTrackUpdateManyDataInput!
  where: PlaylistTrackScalarWhereInput!
}

input PlaylistTrackUpdateWithoutPlaylistDataInput {
  addedAt: DateTimeFieldUpdateOperationsInput
  trackId: IntFieldUpdateOperationsInput
}

input PlaylistTrackUpdateWithWhereUniqueWithoutPlaylistInput {
  data: PlaylistTrackUpdateWithoutPlaylistDataInput!
  where: PlaylistTrackWhereUniqueInput!
}

input PlaylistTrackUpsertWithWhereUniqueWithoutPlaylistInput {
  create: PlaylistTrackCreateWithoutPlaylistInput!
  update: PlaylistTrackUpdateWithoutPlaylistDataInput!
  where: PlaylistTrackWhereUniqueInput!
}

input PlaylistTrackWhereInput {
  addedAt: DateTimeFilter
  AND: [PlaylistTrackWhereInput!]
  id: IntFilter
  NOT: [PlaylistTrackWhereInput!]
  OR: [PlaylistTrackWhereInput!]
  playlist: PlaylistWhereInput
  playlistId: IntFilter
  trackId: IntFilter
}

input PlaylistTrackWhereUniqueInput {
  id: Int
}

input PlaylistUpdateInput {
  description: StringFieldUpdateOperationsInput
  tracks: PlaylistTrackUpdateManyWithoutPlaylistInput
}

input PlaylistWhereInput {
  AND: [PlaylistWhereInput!]
  description: StringFilter
  id: IntFilter
  NOT: [PlaylistWhereInput!]
  OR: [PlaylistWhereInput!]
  tracks: PlaylistTrackListRelationFilter
}

input PlaylistWhereUniqueInput {
  id: Int
}

type Query {
  playlist(where: PlaylistWhereUniqueInput!): Playlist
  playlists(after: PlaylistWhereUniqueInput, before: PlaylistWhereUniqueInput, first: Int, last: Int, where: PlaylistWhereInput): [Playlist!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Track {
  id: Int!
  name: String!
}

input TrackCreateInput {
  name: String!
}

input TrackUpdateInput {
  name: StringFieldUpdateOperationsInput
}

input TrackWhereUniqueInput {
  id: Int
}
